/**
 * Created by Alyona on 18.05.2015.
 */
public class Extends {
    // Расширение класса = 1.наследование + 2.композиция + 3.деллигирование(часто используется в сборщике maven) + 4.в OОП применяется (на уровне аннотаций)
    // Наследование = 1. Интерфейс, 2. Абстрактный метод.
    // Композиция = матрешка: создаем класс А - после используем его в классе В - после В используем в main классе
    // В Джава все классы и объекты наследуются от одного класса OBJECT (базовый класс)
    // Наследоваться можно только от классов!!! От интерфейса нельзя!
    // Наследоваться можно только од одного класса, от двух одновременно НЕЛЬЗЯ. Не поддерживается множественное наследование
    // ИНТЕРФЕЙС: Требования к нему - все методы не имеют реализации (эти методы абстрактные). Реализовать их должен тот, кто его имплементирует.
    // НТЕРФЕЙС: Объект интерфейса НЕЛЬЗЯ создать!!!
    // НТЕРФЕЙС: Возможно множественная имплементация!!
    // НТЕРФЕЙС: Все методы по умолчанию public & abstract. Все поля КОНСТАНТЫ и СТАТИЧЕСКИЕ!!!
    // АНОНИМНЫЙ КЛАСС!? СОЗДАНИЕ ВУТРЕННЕГО КЛАССА позволяет связать слушателя и действие: при нажатии на кнопку можно определить тело метода!!!!
    // Чтобы не переопределять для каждого созданного класса схожий метод - создай асбтрактный класс в нем НЕЛЬЗЯ создать объект, но можно определять методы!!!
    // АБСТРАКТНЫЙ КЛАСС: может содержать И реализованные И не реализованные методы!
    // АБСТРАКНТЫЙ КЛАСС: Позволяет пользоваться СТАТИЧЕСКОЙ ГЕНЕРАЦИЕЙ
    // ИНКАПСУЛЯЦИЯ: защита реализации текущего проекта, сокрытие той реализации, которая необходима и не ломает этот проект.
    // Для управления скрытыми переменными пользуются геттерами и сеттерами.

    // статические переменные, принадлежащие классу, доступны всем объектам этого класса и в других классах вызываются через точку
    // первым грузятся статические переменные, после конструктор
    // лючевое слово СУПЕР - указывает на БАЗОВЫЙ класс, а THIS - на ТЕКУЩИЙ класс
    public static void main(String[] args) {

        final int INT = 3; //не совсем константа (потому как может применяться и к объектам, а не только к примитивам) + имя их большими буквами

        // для объектов неизменной считается только ссылка на них, но входящие параметры могут меняться
        final int[] array = new int[5];

        // как посчитать количество созданных объектов
        A a1 = new A();
        A a2 = new A();
        a2.b = 5; // с переменной i нельзя так сделать, поскольку она статическая и ее делят все объекты
        A a3 = new A();
        A a4 = new A();
        a1.printA();
        a2.printA();
        a3.printA();
        a4.printA();
    }

}
